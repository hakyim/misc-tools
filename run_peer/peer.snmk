if 'outdir' not in config:
    config['outdir'] = 'output'
if 'nfactor' in config:
    nf_option = '-n {}'.format(config['nfactor'])
else:
    nf_option = ''
    
rule all:
    input:
        '{outdir}/{name_tag}.peer.tsv.gz'.format(**config)

rule prepare_input:
    input:
        config['data_matrix']
    params:
        config['if_transpose'],
        config['skip_cols'],
        config['indiv_col']
    output:
        '{outdir}/{name_tag}.mat.csv',
        '{outdir}/{name_tag}.indiv_list.txt'
    shell:
        'Rscript prepare_input.R --input {input[0]} --skip_cols {params[1]} --if_transpose {params[0]} --indiv_col {params[2]} \
             --output {output[0]} --output_indiv_list {output[1]}'

rule run_peer:
    input:
        '{outdir}/{name_tag}.mat.csv'
    output:
        '{outdir}/{name_tag}/W.csv',
        '{outdir}/{name_tag}/X.csv',
        '{outdir}/{name_tag}/residuals.csv'
    log:
        '{outdir}/{name_tag}/PEER.log'
    shell:
        '''
        echo "START" > {log} 
        stdbuf -oL {config[path_to_peertool]} -f {input[0]} {nf_option} -o {wildcards.outdir}/{wildcards.name_tag} |
        while IFS= read -r line
        do
          echo "$line" >> {log}
        done
        '''

rule final_matrix:
    input:
        '{outdir}/{name_tag}/X.csv',
        '{outdir}/{name_tag}.indiv_list.txt'
    params:
        config['if_transpose'],
        config['skip_cols'],
        config['indiv_col']
    output:
        '{outdir}/{name_tag}.peer.tsv.gz'
    shell:
        'Rscript finalize_matrix.R --input_x {input[0]} --indiv_list {input[1]} --output {output[0]}'
        
